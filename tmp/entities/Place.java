package org.oucs.gaboto.entities;

import java.util.HashMap;
import java.util.Map;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import java.lang.reflect.Method;
import org.oucs.gaboto.entities.utils.SimpleLiteralProperty;
import org.oucs.gaboto.entities.utils.SimpleURIProperty;
import org.oucs.gaboto.entities.utils.ComplexProperty;
import org.oucs.gaboto.entities.utils.BagURIProperty;
import org.oucs.gaboto.entities.utils.BagLiteralProperty;
import org.oucs.gaboto.entities.utils.BagComplexProperty;
import org.oucs.gaboto.entities.utils.IndirectProperty;
import org.oucs.gaboto.entities.utils.UnstoredProperty;
import org.oucs.gaboto.entities.utils.PassiveProperty;
import org.oucs.gaboto.entities.utils.StaticProperty;
import org.oucs.gaboto.vocabulary.*;
import org.oucs.gaboto.entities.GabotoEntity;
import org.oucs.gaboto.entities.pool.GabotoEntityPool;
import org.oucs.gaboto.entities.pool.EntityExistsCallback;
import org.oucs.gaboto.entities.pool.PassiveEntitiesRequest;
import org.oucs.gaboto.model.GabotoSnapshot;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.Statement;
import com.hp.hpl.jena.rdf.model.StmtIterator;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.Literal;
import com.hp.hpl.jena.rdf.model.Bag;
import com.hp.hpl.jena.rdf.model.NodeIterator;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.ontology.OntClass;
import org.oucs.gaboto.entities.OxpEntity;
import org.oucs.gaboto.beans.Location;
import org.oucs.gaboto.beans.Address;


/**
 *<p>This class was automatically generated by Gaboto<p>
 */
public class Place extends OxpEntity {
	private String name;
	private Place parent;
	private Location location;
	private Address address;
	private Website homepage;
	private Collection<Place> containedPlaces;


	private static Map<String, List<Method>> indirectPropertyLookupTable;
	static{
		indirectPropertyLookupTable = new HashMap<String, List<Method>>();
		List<Method> list;

		try{
			list = new ArrayList<Method>();
			list.add(Place.class.getMethod("getParent", (Class<?>[])null));
			indirectPropertyLookupTable.put("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasLocation", list);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public String getType(){
		return "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#Place";
	}

	@SimpleLiteralProperty(
		value = "http://purl.org/dc/elements/1.1/title",
		datatypeType = "javaprimitive",
		javaType = "String"
	)
	public String getName(){
		return this.name;
	}

	@SimpleLiteralProperty(
		value = "http://purl.org/dc/elements/1.1/title",
		datatypeType = "javaprimitive",
		javaType = "String"
	)
	public void setName(String name){
		this.name = name;
	}

	@UnstoredProperty({"http://ns.ox.ac.uk/namespace/gaboto/kml/2009/03/owl#parent"})
	@IndirectProperty({"http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasLocation"})
	@SimpleURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#physicallyContainedWithin")
	public Place getParent(){
		if(! this.isDirectReferencesResolved())
			this.resolveDirectReferences();
		return this.parent;
	}

	@SimpleURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#physicallyContainedWithin")
	public void setParent(Place parent){
		if( null != parent)
			this.removeMissingReference( parent.getUri() );
		this.parent = parent;
	}

	@ComplexProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasLocation")
	public Location getLocation(){
		return this.location;
	}

	@ComplexProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasLocation")
	public void setLocation(Location location){
		this.location = location;
	}

	@ComplexProperty("http://nwalsh.com/rdf/vCard#adr")
	public Address getAddress(){
		return this.address;
	}

	@ComplexProperty("http://nwalsh.com/rdf/vCard#adr")
	public void setAddress(Address address){
		this.address = address;
	}

	@SimpleURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasHomepage")
	public Website getHomepage(){
		if(! this.isDirectReferencesResolved())
			this.resolveDirectReferences();
		return this.homepage;
	}

	@SimpleURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasHomepage")
	public void setHomepage(Website homepage){
		if( null != homepage)
			this.removeMissingReference( homepage.getUri() );
		this.homepage = homepage;
	}

	@PassiveProperty(
		uri = "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#physicallyContainedWithin",
		entity = "Place"
	)
	public Collection<Place> getContainedPlaces(){
		if(! isPassiveEntitiesLoaded() )
			loadPassiveEntities();
		return this.containedPlaces;
	}

	@PassiveProperty(
		uri = "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#physicallyContainedWithin",
		entity = "Place"
	)
	private void setContainedPlaces(Collection<Place> containedPlaces){
		this.containedPlaces = containedPlaces;
	}

	private void addContainedPlace(Place containedPlace){
		if(null == this.containedPlaces)
			this.containedPlaces = new HashSet<Place>();
		this.containedPlaces.add(containedPlace);
	}







	public Collection<PassiveEntitiesRequest> getPassiveEntitiesRequest(){
		Collection<PassiveEntitiesRequest> requests = super.getPassiveEntitiesRequest();
		if(null == requests)
			requests = new HashSet<PassiveEntitiesRequest>();
		requests.add(new PassiveEntitiesRequest(){
			public String getType() {
				return "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#Place";
			}

			public String getUri() {
				return "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#physicallyContainedWithin";
			}

			public int getCollectionType() {
				return GabotoEntityPool.PASSIVE_PROPERTY_COLLECTION_TYPE_NONE;
			}

			public void passiveEntityLoaded(GabotoEntity entity) {
				addContainedPlace((Place)entity);
			}
		});
		return requests;
	}


	public void loadFromSnapshot(Resource res, GabotoSnapshot snapshot, GabotoEntityPool pool) {
		super.loadFromSnapshot(res, snapshot, pool);
		Statement stmt;

		stmt = res.getProperty(snapshot.getProperty("http://purl.org/dc/elements/1.1/title"));
		if(null != stmt && stmt.getObject().isLiteral())
			this.setName(((Literal)stmt.getObject()).getString());

		stmt = res.getProperty(snapshot.getProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#physicallyContainedWithin"));
		if(null != stmt && stmt.getObject().isResource()){
			Resource missingReference = (Resource)stmt.getObject();
			EntityExistsCallback callback = new EntityExistsCallback(){
				public void entityExists(GabotoEntityPool pool, GabotoEntity entity) {
					setParent((Place)entity);
				}
			};
			this.addMissingReference(missingReference, callback);
		}

		stmt = res.getProperty(snapshot.getProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasLocation"));
		if(null != stmt && stmt.getObject().isAnon()){
			Location location = new Location();
			location.loadFromResource((Resource)stmt.getObject(), snapshot, pool);
			setLocation(location);
		}

		stmt = res.getProperty(snapshot.getProperty("http://nwalsh.com/rdf/vCard#adr"));
		if(null != stmt && stmt.getObject().isAnon()){
			Address address = new Address();
			address.loadFromResource((Resource)stmt.getObject(), snapshot, pool);
			setAddress(address);
		}

		stmt = res.getProperty(snapshot.getProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasHomepage"));
		if(null != stmt && stmt.getObject().isResource()){
			Resource missingReference = (Resource)stmt.getObject();
			EntityExistsCallback callback = new EntityExistsCallback(){
				public void entityExists(GabotoEntityPool pool, GabotoEntity entity) {
					setHomepage((Website)entity);
				}
			};
			this.addMissingReference(missingReference, callback);
		}

	}
	public List<Method> getIndirectMethodsForProperty(String propertyURI){
		List<Method> list = super.getIndirectMethodsForProperty(propertyURI);
		if(null == list)
			return indirectPropertyLookupTable.get(propertyURI);
		
		else{
			List<Method> tmp = indirectPropertyLookupTable.get(propertyURI);
			if(null != tmp)
				list.addAll(tmp);
		}
		return list;
	}

}