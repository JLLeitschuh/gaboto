package org.oucs.gaboto.entities;

import java.util.HashMap;
import java.util.Map;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import java.lang.reflect.Method;
import org.oucs.gaboto.entities.utils.SimpleLiteralProperty;
import org.oucs.gaboto.entities.utils.SimpleURIProperty;
import org.oucs.gaboto.entities.utils.ComplexProperty;
import org.oucs.gaboto.entities.utils.BagURIProperty;
import org.oucs.gaboto.entities.utils.BagLiteralProperty;
import org.oucs.gaboto.entities.utils.BagComplexProperty;
import org.oucs.gaboto.entities.utils.IndirectProperty;
import org.oucs.gaboto.entities.utils.UnstoredProperty;
import org.oucs.gaboto.entities.utils.PassiveProperty;
import org.oucs.gaboto.entities.utils.StaticProperty;
import org.oucs.gaboto.vocabulary.*;
import org.oucs.gaboto.entities.GabotoEntity;
import org.oucs.gaboto.entities.pool.GabotoEntityPool;
import org.oucs.gaboto.entities.pool.EntityExistsCallback;
import org.oucs.gaboto.entities.pool.PassiveEntitiesRequest;
import org.oucs.gaboto.model.GabotoSnapshot;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.Statement;
import com.hp.hpl.jena.rdf.model.StmtIterator;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.Literal;
import com.hp.hpl.jena.rdf.model.Bag;
import com.hp.hpl.jena.rdf.model.NodeIterator;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.ontology.OntClass;
import org.oucs.gaboto.entities.OxpEntity;
import org.oucs.gaboto.beans.Address;


/**
 *<p>This class was automatically generated by Gaboto<p>
 */
public class Unit extends OxpEntity {
	private Address address;
	private Website homepage;
	private String oUCSCode;
	private Website itHomepage;
	private String name;
	private Collection<Building> occupiedBuildings;
	private Place primaryPlace;
	private Unit subtypeOf;
	private Website weblearn;
	private Collection<Unit> hasSubtypes;


	private static Map<String, List<Method>> indirectPropertyLookupTable;
	static{
		indirectPropertyLookupTable = new HashMap<String, List<Method>>();
		List<Method> list;

		try{
			list = new ArrayList<Method>();
			list.add(Unit.class.getMethod("getPrimaryPlace", (Class<?>[])null));
			list.add(Unit.class.getMethod("getSubtypeOf", (Class<?>[])null));
			list.add(Unit.class.getMethod("getOccupiedBuildings", (Class<?>[])null));
			indirectPropertyLookupTable.put("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasLocation", list);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public String getType(){
		return "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#Unit";
	}

	@ComplexProperty("http://nwalsh.com/rdf/vCard#adr")
	public Address getAddress(){
		return this.address;
	}

	@ComplexProperty("http://nwalsh.com/rdf/vCard#adr")
	public void setAddress(Address address){
		this.address = address;
	}

	@SimpleURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasHomepage")
	public Website getHomepage(){
		if(! this.isDirectReferencesResolved())
			this.resolveDirectReferences();
		return this.homepage;
	}

	@SimpleURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasHomepage")
	public void setHomepage(Website homepage){
		if( null != homepage)
			this.removeMissingReference( homepage.getUri() );
		this.homepage = homepage;
	}

	@SimpleLiteralProperty(
		value = "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasOUCSCode",
		datatypeType = "javaprimitive",
		javaType = "String"
	)
	public String getOUCSCode(){
		return this.oUCSCode;
	}

	@SimpleLiteralProperty(
		value = "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasOUCSCode",
		datatypeType = "javaprimitive",
		javaType = "String"
	)
	public void setOUCSCode(String oUCSCode){
		this.oUCSCode = oUCSCode;
	}

	@SimpleURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasITHomepage")
	public Website getItHomepage(){
		if(! this.isDirectReferencesResolved())
			this.resolveDirectReferences();
		return this.itHomepage;
	}

	@SimpleURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasITHomepage")
	public void setItHomepage(Website itHomepage){
		if( null != itHomepage)
			this.removeMissingReference( itHomepage.getUri() );
		this.itHomepage = itHomepage;
	}

	@SimpleLiteralProperty(
		value = "http://purl.org/dc/elements/1.1/title",
		datatypeType = "javaprimitive",
		javaType = "String"
	)
	public String getName(){
		return this.name;
	}

	@SimpleLiteralProperty(
		value = "http://purl.org/dc/elements/1.1/title",
		datatypeType = "javaprimitive",
		javaType = "String"
	)
	public void setName(String name){
		this.name = name;
	}

	@IndirectProperty({"http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasLocation"})
	@BagURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#occupies")
	public Collection<Building> getOccupiedBuildings(){
		if(! this.isDirectReferencesResolved())
			this.resolveDirectReferences();
		return this.occupiedBuildings;
	}

	@BagURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#occupies")
	public void setOccupiedBuildings(Collection<Building> occupiedBuildings){
		if( null != occupiedBuildings){
			for( GabotoEntity _entity : occupiedBuildings)
				this.removeMissingReference( _entity.getUri() );
		}

		this.occupiedBuildings = occupiedBuildings;
	}

	public void addOccupiedBuilding(Building occupiedBuilding){
		if( null != occupiedBuilding)
			this.removeMissingReference( occupiedBuilding.getUri() );
		if(null == this.occupiedBuildings)
			this.occupiedBuildings = new HashSet<Building>();
		this.occupiedBuildings.add(occupiedBuilding);
	}

	@IndirectProperty({"http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasLocation"})
	@SimpleURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#primaryPlace")
	public Place getPrimaryPlace(){
		if(! this.isDirectReferencesResolved())
			this.resolveDirectReferences();
		return this.primaryPlace;
	}

	@SimpleURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#primaryPlace")
	public void setPrimaryPlace(Place primaryPlace){
		if( null != primaryPlace)
			this.removeMissingReference( primaryPlace.getUri() );
		this.primaryPlace = primaryPlace;
	}

	@UnstoredProperty({"http://ns.ox.ac.uk/namespace/gaboto/kml/2009/03/owl#parent"})
	@IndirectProperty({"http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasLocation"})
	@SimpleURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#subtypeOf")
	public Unit getSubtypeOf(){
		if(! this.isDirectReferencesResolved())
			this.resolveDirectReferences();
		return this.subtypeOf;
	}

	@SimpleURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#subtypeOf")
	public void setSubtypeOf(Unit subtypeOf){
		if( null != subtypeOf)
			this.removeMissingReference( subtypeOf.getUri() );
		this.subtypeOf = subtypeOf;
	}

	@SimpleURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasWeblearn")
	public Website getWeblearn(){
		if(! this.isDirectReferencesResolved())
			this.resolveDirectReferences();
		return this.weblearn;
	}

	@SimpleURIProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasWeblearn")
	public void setWeblearn(Website weblearn){
		if( null != weblearn)
			this.removeMissingReference( weblearn.getUri() );
		this.weblearn = weblearn;
	}

	@PassiveProperty(
		uri = "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#subtypeOf",
		entity = "Unit"
	)
	public Collection<Unit> getHasSubtypes(){
		if(! isPassiveEntitiesLoaded() )
			loadPassiveEntities();
		return this.hasSubtypes;
	}

	@PassiveProperty(
		uri = "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#subtypeOf",
		entity = "Unit"
	)
	private void setHasSubtypes(Collection<Unit> hasSubtypes){
		this.hasSubtypes = hasSubtypes;
	}

	private void addHasSubtype(Unit hasSubtype){
		if(null == this.hasSubtypes)
			this.hasSubtypes = new HashSet<Unit>();
		this.hasSubtypes.add(hasSubtype);
	}





	public Object getLocation(){
		return this.getPropertyValue("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasLocation", false, true);
	}


                            
    @StaticProperty("http://purl.org/dc/elements/1.1/description")
    public String getDescription(){
        String description = "";
        
        if(null != getHomepage())
            description += "Website: <a href=\"" + getHomepage().getUri() + "\">" + getHomepage().getUri() + "</a><br/>";
        if(null != getImages() && getImages().size() > 0){
        	Image img = getImages().iterator().next();
        	description += "<img src=\"" + img.getUri() + "\" width=\"" + img.getWidth() + "\" height=\"" + img.getHeight() + "\"/>";
        }
        
        return description;
    }
                    
                        

	public Collection<PassiveEntitiesRequest> getPassiveEntitiesRequest(){
		Collection<PassiveEntitiesRequest> requests = super.getPassiveEntitiesRequest();
		if(null == requests)
			requests = new HashSet<PassiveEntitiesRequest>();
		requests.add(new PassiveEntitiesRequest(){
			public String getType() {
				return "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#Unit";
			}

			public String getUri() {
				return "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#subtypeOf";
			}

			public int getCollectionType() {
				return GabotoEntityPool.PASSIVE_PROPERTY_COLLECTION_TYPE_NONE;
			}

			public void passiveEntityLoaded(GabotoEntity entity) {
				addHasSubtype((Unit)entity);
			}
		});
		return requests;
	}


	public void loadFromSnapshot(Resource res, GabotoSnapshot snapshot, GabotoEntityPool pool) {
		super.loadFromSnapshot(res, snapshot, pool);
		Statement stmt;

		stmt = res.getProperty(snapshot.getProperty("http://nwalsh.com/rdf/vCard#adr"));
		if(null != stmt && stmt.getObject().isAnon()){
			Address address = new Address();
			address.loadFromResource((Resource)stmt.getObject(), snapshot, pool);
			setAddress(address);
		}

		stmt = res.getProperty(snapshot.getProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasHomepage"));
		if(null != stmt && stmt.getObject().isResource()){
			Resource missingReference = (Resource)stmt.getObject();
			EntityExistsCallback callback = new EntityExistsCallback(){
				public void entityExists(GabotoEntityPool pool, GabotoEntity entity) {
					setHomepage((Website)entity);
				}
			};
			this.addMissingReference(missingReference, callback);
		}

		stmt = res.getProperty(snapshot.getProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasOUCSCode"));
		if(null != stmt && stmt.getObject().isLiteral())
			this.setOUCSCode(((Literal)stmt.getObject()).getString());

		stmt = res.getProperty(snapshot.getProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasITHomepage"));
		if(null != stmt && stmt.getObject().isResource()){
			Resource missingReference = (Resource)stmt.getObject();
			EntityExistsCallback callback = new EntityExistsCallback(){
				public void entityExists(GabotoEntityPool pool, GabotoEntity entity) {
					setItHomepage((Website)entity);
				}
			};
			this.addMissingReference(missingReference, callback);
		}

		stmt = res.getProperty(snapshot.getProperty("http://purl.org/dc/elements/1.1/title"));
		if(null != stmt && stmt.getObject().isLiteral())
			this.setName(((Literal)stmt.getObject()).getString());

		stmt = res.getProperty(snapshot.getProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#occupies"));
		if(null != stmt && stmt.getObject().isResource() && null != stmt.getBag()){
			Bag bag = stmt.getBag();
			NodeIterator nodeIt = bag.iterator();
			while(nodeIt.hasNext()){
				RDFNode node = nodeIt.nextNode();
				if(! node.isResource())
					throw new IllegalArgumentException("node should be a resource");

				Resource missingReference = (Resource)node;
				EntityExistsCallback callback = new EntityExistsCallback(){
					public void entityExists(GabotoEntityPool pool, GabotoEntity entity) {
						addOccupiedBuilding((Building) entity);
					}
				};
				this.addMissingReference(missingReference, callback);
			}
		}

		stmt = res.getProperty(snapshot.getProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#primaryPlace"));
		if(null != stmt && stmt.getObject().isResource()){
			Resource missingReference = (Resource)stmt.getObject();
			EntityExistsCallback callback = new EntityExistsCallback(){
				public void entityExists(GabotoEntityPool pool, GabotoEntity entity) {
					setPrimaryPlace((Place)entity);
				}
			};
			this.addMissingReference(missingReference, callback);
		}

		stmt = res.getProperty(snapshot.getProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#subtypeOf"));
		if(null != stmt && stmt.getObject().isResource()){
			Resource missingReference = (Resource)stmt.getObject();
			EntityExistsCallback callback = new EntityExistsCallback(){
				public void entityExists(GabotoEntityPool pool, GabotoEntity entity) {
					setSubtypeOf((Unit)entity);
				}
			};
			this.addMissingReference(missingReference, callback);
		}

		stmt = res.getProperty(snapshot.getProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#hasWeblearn"));
		if(null != stmt && stmt.getObject().isResource()){
			Resource missingReference = (Resource)stmt.getObject();
			EntityExistsCallback callback = new EntityExistsCallback(){
				public void entityExists(GabotoEntityPool pool, GabotoEntity entity) {
					setWeblearn((Website)entity);
				}
			};
			this.addMissingReference(missingReference, callback);
		}

	}
	public List<Method> getIndirectMethodsForProperty(String propertyURI){
		List<Method> list = super.getIndirectMethodsForProperty(propertyURI);
		if(null == list)
			return indirectPropertyLookupTable.get(propertyURI);
		
		else{
			List<Method> tmp = indirectPropertyLookupTable.get(propertyURI);
			if(null != tmp)
				list.addAll(tmp);
		}
		return list;
	}

}