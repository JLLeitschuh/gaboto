package org.oucs.gaboto.entities;

import java.util.HashMap;
import java.util.Map;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import java.lang.reflect.Method;
import org.oucs.gaboto.entities.utils.SimpleLiteralProperty;
import org.oucs.gaboto.entities.utils.SimpleURIProperty;
import org.oucs.gaboto.entities.utils.ComplexProperty;
import org.oucs.gaboto.entities.utils.BagURIProperty;
import org.oucs.gaboto.entities.utils.BagLiteralProperty;
import org.oucs.gaboto.entities.utils.BagComplexProperty;
import org.oucs.gaboto.entities.utils.IndirectProperty;
import org.oucs.gaboto.entities.utils.UnstoredProperty;
import org.oucs.gaboto.entities.utils.PassiveProperty;
import org.oucs.gaboto.entities.utils.StaticProperty;
import org.oucs.gaboto.vocabulary.*;
import org.oucs.gaboto.entities.GabotoEntity;
import org.oucs.gaboto.entities.pool.GabotoEntityPool;
import org.oucs.gaboto.entities.pool.EntityExistsCallback;
import org.oucs.gaboto.entities.pool.PassiveEntitiesRequest;
import org.oucs.gaboto.model.GabotoSnapshot;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.Statement;
import com.hp.hpl.jena.rdf.model.StmtIterator;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.Literal;
import com.hp.hpl.jena.rdf.model.Bag;
import com.hp.hpl.jena.rdf.model.NodeIterator;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.ontology.OntClass;
import org.oucs.gaboto.entities.OxpEntity;


/**
 *<p>This class was automatically generated by Gaboto<p>
 */
public class Image extends OxpEntity {
	private String width;
	private String height;
	private Collection<OxpEntity> imageContents;


	private static Map<String, List<Method>> indirectPropertyLookupTable;
	static{
		indirectPropertyLookupTable = new HashMap<String, List<Method>>();
		List<Method> list;

		try{
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public String getType(){
		return "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#Image";
	}

	@SimpleLiteralProperty(
		value = "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#width",
		datatypeType = "javaprimitive",
		javaType = "String"
	)
	public String getWidth(){
		return this.width;
	}

	@SimpleLiteralProperty(
		value = "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#width",
		datatypeType = "javaprimitive",
		javaType = "String"
	)
	public void setWidth(String width){
		this.width = width;
	}

	@SimpleLiteralProperty(
		value = "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#height",
		datatypeType = "javaprimitive",
		javaType = "String"
	)
	public String getHeight(){
		return this.height;
	}

	@SimpleLiteralProperty(
		value = "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#height",
		datatypeType = "javaprimitive",
		javaType = "String"
	)
	public void setHeight(String height){
		this.height = height;
	}

	@PassiveProperty(
		uri = "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#inImage",
		entity = "OxpEntity"
	)
	public Collection<OxpEntity> getImageContents(){
		if(! isPassiveEntitiesLoaded() )
			loadPassiveEntities();
		return this.imageContents;
	}

	@PassiveProperty(
		uri = "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#inImage",
		entity = "OxpEntity"
	)
	private void setImageContents(Collection<OxpEntity> imageContents){
		this.imageContents = imageContents;
	}

	private void addImageContent(OxpEntity imageContent){
		if(null == this.imageContents)
			this.imageContents = new HashSet<OxpEntity>();
		this.imageContents.add(imageContent);
	}







	public Collection<PassiveEntitiesRequest> getPassiveEntitiesRequest(){
		Collection<PassiveEntitiesRequest> requests = super.getPassiveEntitiesRequest();
		if(null == requests)
			requests = new HashSet<PassiveEntitiesRequest>();
		requests.add(new PassiveEntitiesRequest(){
			public String getType() {
				return "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#OxpEntity";
			}

			public String getUri() {
				return "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#inImage";
			}

			public int getCollectionType() {
				return GabotoEntityPool.PASSIVE_PROPERTY_COLLECTION_TYPE_BAG;
			}

			public void passiveEntityLoaded(GabotoEntity entity) {
				addImageContent((OxpEntity)entity);
			}
		});
		return requests;
	}


	public void loadFromSnapshot(Resource res, GabotoSnapshot snapshot, GabotoEntityPool pool) {
		super.loadFromSnapshot(res, snapshot, pool);
		Statement stmt;

		stmt = res.getProperty(snapshot.getProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#width"));
		if(null != stmt && stmt.getObject().isLiteral())
			this.setWidth(((Literal)stmt.getObject()).getString());

		stmt = res.getProperty(snapshot.getProperty("http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#height"));
		if(null != stmt && stmt.getObject().isLiteral())
			this.setHeight(((Literal)stmt.getObject()).getString());

	}
	public List<Method> getIndirectMethodsForProperty(String propertyURI){
		List<Method> list = super.getIndirectMethodsForProperty(propertyURI);
		if(null == list)
			return indirectPropertyLookupTable.get(propertyURI);
		
		else{
			List<Method> tmp = indirectPropertyLookupTable.get(propertyURI);
			if(null != tmp)
				list.addAll(tmp);
		}
		return list;
	}

}