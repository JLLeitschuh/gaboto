package org.oucs.gaboto.entities;

import java.lang.reflect.Method;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import org.oucs.gaboto.entities.pool.GabotoEntityPool;
import org.oucs.gaboto.entities.pool.PassiveEntitiesRequest;
import org.oucs.gaboto.entities.utils.PassiveProperty;


/**
 *<p>This class was automatically generated by Gaboto<p>
 */
public class Building extends Place {
	private Collection<Unit> occupiedBy;


	private static Map<String, List<Method>> indirectPropertyLookupTable;
	static{
		indirectPropertyLookupTable = new HashMap<String, List<Method>>();
		List<Method> list;

		try{
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public String getType(){
		return "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#Building";
	}

	@PassiveProperty(
		uri = "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#occupies",
		entity = "Unit"
	)
	public Collection<Unit> getOccupiedBy(){
		if(! isPassiveEntitiesLoaded() )
			loadPassiveEntities();
		return this.occupiedBy;
	}

	@PassiveProperty(
		uri = "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#occupies",
		entity = "Unit"
	)
	private void setOccupiedBy(Collection<Unit> occupiedBy){
		this.occupiedBy = occupiedBy;
	}

	private void addOccupiedBy(Unit occupiedBy){
		if(null == this.occupiedBy)
			this.occupiedBy = new HashSet<Unit>();
		this.occupiedBy.add(occupiedBy);
	}







	public Collection<PassiveEntitiesRequest> getPassiveEntitiesRequest(){
		Collection<PassiveEntitiesRequest> requests = super.getPassiveEntitiesRequest();
		if(null == requests)
			requests = new HashSet<PassiveEntitiesRequest>();
		requests.add(new PassiveEntitiesRequest(){
			public String getType() {
				return "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#Unit";
			}

			public String getUri() {
				return "http://ns.ox.ac.uk/namespace/oxpoints/2009/02/owl#occupies";
			}

			public int getCollectionType() {
				return GabotoEntityPool.PASSIVE_PROPERTY_COLLECTION_TYPE_BAG;
			}

			public void passiveEntityLoaded(GabotoEntity entity) {
				addOccupiedBy((Unit)entity);
			}
		});
		return requests;
	}


	protected List<Method> getIndirectMethodsForProperty(String propertyURI){
		List<Method> list = super.getIndirectMethodsForProperty(propertyURI);
		if(null == list)
			return indirectPropertyLookupTable.get(propertyURI);
		
		else{
			List<Method> tmp = indirectPropertyLookupTable.get(propertyURI);
			if(null != tmp)
				list.addAll(tmp);
		}
		return list;
	}

}